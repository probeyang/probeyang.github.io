<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Sanlt,就是加了N多盐的地方</title>
    <link>https://www.sanlt.com/categories/python/</link>
    <description>Recent content in Python on Sanlt,就是加了N多盐的地方</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 22 Sep 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://www.sanlt.com/categories/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Celery版本错误问题探知</title>
      <link>https://www.sanlt.com/post/python/celery_version_question/</link>
      <pubDate>Sat, 22 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.sanlt.com/post/python/celery_version_question/</guid>
      <description>Celery启动的时候报这样的错误： Traceback (most recent call last): File &amp;quot;/usr/local/bin/celery&amp;quot;, line 11, in sys.exit(main()) File &amp;quot;/usr/local/lib/python3.5/site-packages/celery/main.py&amp;quot;, line 16, in main _main() File &amp;quot;/usr/local/lib/python3.5/site-packages/celery/bin/celery.py&amp;quot;, line 322, in main cmd.execute_from_commandline(argv) File &amp;quot;/usr/local/lib/python3.5/site-packages/celery/bin/celery.py&amp;quot;, line 484, in execute_from_commandline super(CeleryCommand, self).execute_from_commandline(argv))) File &amp;quot;/usr/local/lib/python3.5/site-packages/celery/bin/base.py&amp;quot;, line 275, in execute_from_commandline return self.handle_argv(self.prog_name, argv[1:]) File &amp;quot;/usr/local/lib/python3.5/site-packages/celery/bin/celery.py&amp;quot;, line 476, in handle_argv return self.execute(command, argv) File</description>
    </item>
    
    <item>
      <title>OrderedDict学习探知</title>
      <link>https://www.sanlt.com/post/python/ordereddict_user_notice/</link>
      <pubDate>Sat, 22 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.sanlt.com/post/python/ordereddict_user_notice/</guid>
      <description>正常使用 在使用python的collections中一个OrderedDict来做有序dict处理的时候，我们常使用下面的方式，代码执行多次</description>
    </item>
    
    <item>
      <title>Python函数加括号与不加括号问题研究</title>
      <link>https://www.sanlt.com/post/python/func_add_bracket/</link>
      <pubDate>Sat, 22 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.sanlt.com/post/python/func_add_bracket/</guid>
      <description>理解函数带括号和不带括号分别代表什么意思: 如果只写一个函数名称myfunc而没有带括号，那么此时的myfunc仅代表一个函数对象；而当你写的</description>
    </item>
    
    <item>
      <title>list中数据去重并保留顺序</title>
      <link>https://www.sanlt.com/post/python/list_uniqio_and_sort/</link>
      <pubDate>Sat, 22 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.sanlt.com/post/python/list_uniqio_and_sort/</guid>
      <description>list去重最简单的方式是使用set方法再用list方法返回 data_list = list(set(data_list)) list去重还保留顺序的做法 def get_uniqio_list_data(value_list): data_list = list(set(value_list)) data_list.sort(key=value_list.index) return data_list</description>
    </item>
    
    <item>
      <title>nonlocal学习探知</title>
      <link>https://www.sanlt.com/post/python/nonlocal_study/</link>
      <pubDate>Sat, 22 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.sanlt.com/post/python/nonlocal_study/</guid>
      <description>什么是nonlocal（非局部语句） nonlocal是Python 3.x中新引入的特性，可以让你给外层但非全局作用域中的变量赋值。官方文档中</description>
    </item>
    
    <item>
      <title>pycharm安装black格式化工具</title>
      <link>https://www.sanlt.com/post/python/black_code_format_tool/</link>
      <pubDate>Sat, 22 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.sanlt.com/post/python/black_code_format_tool/</guid>
      <description>注意：black对python3支持的效果不好，现在必须在python3.6以上版本才可以使用black。也正是因为支持效果不好，才有此说明</description>
    </item>
    
    <item>
      <title>使用math中的fsum进行数据求和汇总</title>
      <link>https://www.sanlt.com/post/python/fsum_study/</link>
      <pubDate>Sat, 22 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.sanlt.com/post/python/fsum_study/</guid>
      <description>fsum这个方法可以用于进行可迭代数据的求和或者汇总。避免了还需要些循环语句。但通常情况下在不知道可迭代数据中的每个元素都是int或者flo</description>
    </item>
    
    <item>
      <title>日期时间类操作详解</title>
      <link>https://www.sanlt.com/post/python/datetime_study/</link>
      <pubDate>Sat, 22 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.sanlt.com/post/python/datetime_study/</guid>
      <description>python的日期时间操作相当混杂，一会time库，一会datetime库，网上资料又是杂乱到极点，糟糕的甚，于是我这里整理了一些常用的时间</description>
    </item>
    
    <item>
      <title>获取Python中每个元组的第一个元素</title>
      <link>https://www.sanlt.com/post/python/dict_first_item/</link>
      <pubDate>Sat, 22 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.sanlt.com/post/python/dict_first_item/</guid>
      <description>问题： 我有个元祖类似：[(&amp;lsquo;广东&amp;rsquo;,4),(&amp;lsquo;北京&amp;rsquo;, 1), (&amp;lsquo;福建&amp;rsquo;,</description>
    </item>
    
  </channel>
</rss>